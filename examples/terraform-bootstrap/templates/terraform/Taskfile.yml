version: "3"

{{- $envs := list }}
{{- range $env := .Variables.ENVIRONMENTS -}}
{{- $envs = append $envs $env.NAME -}}
{{- end }}

vars:
  ENVIRONMENTS: {{ $envs | join "," }}

tasks:
  init:
    cmds:
      - for: { var: ENVIRONMENTS, split: "," }
        task: init-environment
        vars:
          ENVIRONMENT: "{{ "{{ .ITEM }}" }}"
      {{- if .Variables.CREATE_GITHUB_ACTIONS_PIPELINE }}
      - task: gh:add-ci-service-principals
      - task: gh:set-ci-vars
      {{- end }}

  init-environment:
    deps: [az:login]
    requires:
      vars:
        - ENVIRONMENT
    cmds:
      - rm -Rf .terraform/terraform.tfstate backend.tf # Remove backend from previous run
      - terraform init
      - terraform workspace new {{ `{{ .ENVIRONMENT }}` }}
      - >-
        terraform apply
        -target azurerm_storage_container.tfstate
        -target azurerm_role_assignment.tfstate
        -auto-approve
        -input=false
      # Save output values to variables before migrating the backend
      - >-
        RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name);
        STORAGE_ACCOUNT_NAME=$(terraform output -raw tfstate_storage_account_name);
        STORAGE_CONTAINER_NAME=$(terraform output -raw tfstate_storage_container_name);

        terraform apply
        -target local_file.backend_config
        -auto-approve
        -input=false;

        terraform init
        -migrate-state
        -force-copy
        -input=false
        -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
        -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME"
        -backend-config="container_name=$STORAGE_CONTAINER_NAME"
        -backend-config="key=tfstate_";
      - rm -Rf terraform.tfstate.d # Remove local state files

  az:login:
    cmds:
      - az login
    status:
      - az account show

  gh:login:
    cmds:
      - gh auth login
    status:
      - gh auth token

  {{ if .Variables.CREATE_GITHUB_ACTIONS_PIPELINE -}}
  gh:add-ci-service-principals:
    deps: [gh:login]
    cmds:
      {{- range $env := .Variables.ENVIRONMENTS }}
      - gh secret set ARM_CLIENT_ID_{{ $env.NAME | upper }}
      - gh secret set ARM_CLIENT_SECRET_{{ $env.NAME | upper }}
      - gh secret set ARM_SUBSCRIPTION_ID_{{ $env.NAME | upper }}
      - gh secret set ARM_TENANT_ID_{{ $env.NAME | upper }}
      {{- end }}
  {{ end }}

  {{ if .Variables.CREATE_GITHUB_ACTIONS_PIPELINE -}}
  gh:set-ci-vars:
    deps: [gh:login]
    cmds:
      - gh variable set TERRAFORM_VERSION --body 1.5.7
  {{ end }}
# TODO: task to delete state resources for a particular env
# TODO: validate resource group name when prompting
